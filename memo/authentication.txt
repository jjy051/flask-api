JWT 토큰 방식에 대해.

왜 필요한가? 어떤 배경에서 등장했는가?
- HTTP 통신은 stateless 하다. 즉, 클라이언트와 서버간에 이전 정보(인증)를 가지고 있지 않는다. \n
클라이언트는 서버에게 request 를 할 떄마다 자신이 인증받은 유저라는 것을 서버에게 전달해야 한다.

- 서버는 인증정보 (유저 정보, 허가받은 범위 등)를 담고 있는 DB를 가지고 있고, \n
클라이언트가 request 를 할 때마다 보내는 토큰을 인증 DB와 매칭하여 허가된 유저인지, 그리고 허가받은 request 인지를 확인한다.

- 그러나 이런 방식은 인증 DB에 트래픽이 몰리는 단점을 가지고 있다. \n
여러 클라이언트들이 웹페이지를 클릭하고 이동하는 request 마다 인증 DB를 통해 허가를 받아야 하기 때문에 bottle-neck이 발생한다. \n
또한 인증 DB의 특성상 분산 DB로 처리하기에도 어려움이 있다. \n
분산 DB를 하더라도 앞단에서 해당 클라이언트의 인증 정보는 특정 인증 DB에 있다고 보내주는 기능이 필요하다.

- 이러한 배경에서 다른 형태의 인증방식이 고안되었다. \n
클라이언트가 처음 로그인할 때에 서버는 인증 DB를 통해 해당 유저의 신원여부와 허가 범위를 검증하고 "해당 정보를 담고 있는 토큰"을 발행하여 클라이언트로 넘겨준다. \n
이후 클라이언트는 request를 할 때마다 해당 토큰을 같이 서버에 보내고, \n
서버는 해당 토큰의 정보를 통해 검증된 유저이며 허가 범위를 확인하여 response 해준다. \n
즉, 첫 로그인 이후 클라이언트의 request 에 대해서는 인증 DB를 거치지 않고 response 할 수 있어 효율적이다.

- 서버단에서 인증 DB를 통해 토큰을 검증하지 않기 때문에 해커가 인증, 권한 정보를 조작하여 가짜 토큰을 전달하여 악용할 여지가 있다. \n
이를 방지하기 위해 JWT가 활용된다. \n
JWT는 header, payload, signature 부분을 가지고 있다. \n
payload 부분에 유저 정보, 허가받은 범위, 만료 일자 같은 정보를 담고 있고, \n
해당 payload를 서버가 가지고 있는 SECRET_KEY와 결합하여 해싱한 것이 signature 이다. \n
즉, 해커가 임의로 payload의 정보를 조작하여 토큰을 넘겨주더라도 \n
서버단에서 해당 payload와 SECRET_KEY를 통해 해싱한 signature 가 전달받은 JWT의 signature와 다르다는 것을 알아차릴 수 있다.

- 즉, JWT는 1)인증 DB서버로 트래픽이 몰리는 비효율을 해결하면서 2)동시에 보안을 유지하도록 한 방식이다.

- 보안 측면에서 기존의 세션 방식 (인증 DB로 트래픽이 몰리는 방식) 에 비해 나아진 점은 없다. \n
(토큰 만료일 설정은 기존 세션 방식에서도 마찬가지로 하면 된다. \n
그러나 인증 DB에 토큰을 계속 적재하고 만료가 된 토큰은 삭제하는 등의 부하가 걸리는 점에서 JWT 방식이 더 개선되었다고 볼 수 있다)

- 참고 링크: https://velog.io/@mygomi/TIL-50-JWT%EC%97%90-%EB%8C%80%ED%95%B4-%EB%B0%9C%ED%91%9C%ED%95%B4%EB%B3%B4%EA%B2%A0%EC%8A%B5%EB%8B%88%EB%8B%A4


bcrypto 에 대해.

왜 필요한가? 어떤 배경에서 등장했는가?
- 기존의 해싱은 rainbow attack 에 취약점이 있다. \n
이를 보안하기 위해 랜덤 넘버를 집어넣어 해싱하는 salting 기법과 해싱을 여러번 반복하여 암호화하는 키 스트레칭 방식이 있다.

- (내 생각) 키 스트레칭 기법에서 몇 번을 반복하는지 N 을 서버단에서 가지고 있는 것이다. \n
그러면 해커가 해당 N을 탈취하지 못하는 한 rainbow attack이 어려울 것이다. \n
솔팅도 마찬가지로 서버단에서 솔팅 랜덤 넘버를 가지고 있거나 아예 개발자도 모르게 gensalt() 해서 rainbow attack 에 방어하는 것이다.

- 참고 링크: https://d2.naver.com/helloworld/318732
- 참고 링크: https://velog.io/@kylexid/%EC%99%9C-bcrypt-%EC%95%94%ED%98%B8%ED%99%94-%EB%B0%A9%EC%8B%9D%EC%9D%B4-%EC%B6%94%EC%B2%9C%EB%90%98%EC%96%B4%EC%A7%88%EA%B9%8C

